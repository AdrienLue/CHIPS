classdef (Abstract) DataMeasureROIs < Data
%DataMeasureROIs - Superclass for DataMeasureROIs classes
%
%   The DataMeasureROIs class is an abstract superclass that implements (or
%   requires implementation in its subclasses via abstract methods or
%   properties) all basic functionality related to storing data from ROI
%   measurements. Typically there is one concrete subclass of
%   DataMeasureROIs for every concrete subclass of CalcMeasureROIs, and the
%   DataMeasureROIs object stores the algorithm-specific output data that
%   is generated by the corresponding CalcMeasureROIs class.
%
% DataMeasureROIs public properties inherited from Data:
%   mask            - A mask combining all of the other masks
%   means           - A helper structure containing means of the data
%   nPlotsGood      - The number of plots in non-debug mode        
%   nPlotsDebug     - The number of plots in debug mode
%   state           - The current state
%   stdevs          - A helper structure containing stdevs of the data
%
% DataMeasureROIs public properties
%   rawTrace	- A vector of whole frame intensity over time [a.u.]
%   rawTraceNorm - A time series of normalised whole frame intensity [a.u.] 
%   roiNames    - The ROI names
%   time        - A vector indicating the time point for each frame [s]
%   traces      - The intensity over time for each ROI [a.u.]
%   tracesExist - Whether or not the trace exists at a given time
%   tracesNorm  - The normalised intensity over time for each ROI [a.u.]
%
% DataMeasureROIs public methods:
%   add_raw_data    - Add raw data to the Data object
%   add_processed_data - Add processed data to the Data object
%   add_mask_data   - Add mask data to the Data object
%   plot            - Plot a single graph from the data object
%   plot_graphs     - Plot multiple graphs from the data object
%   output_data     - Output the data
%
%   See also DataMeasureROIsDummy, Data, CalcMeasureROIs, CellScan

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    % ================================================================== %
    
    properties
        
        %rawTrace - A vector of whole frame intensity over time [a.u.] 
        %
        %   The mean intensity per frame, calculated from the raw image
        %   sequence.
        %
        %   See also CalcMeasureROIs, RawImg.rawdata
        rawTrace
        
        %rawTraceNorm - A time series of normalised whole frame intensity [a.u.] 
        %
        %   The normalised mean intensity per frame, calculated from the
        %   raw image sequence.
        %
        %   See also CalcMeasureROIs, RawImg.rawdata
        rawTraceNorm
        
        %roiNames - The ROI names
        %
        %   A cell vector containing the ROI names.  
        %
        %   See also CalcFindROIs, CellScan
        roiNames
        
        %time - A vector indicating the time point for each frame [s]
        %
        %   The vector indicates the time in seconds relative to the first
        %   frame at which each subsequent frame was recorded.
        %
        %   See also Metadata.frameRate
        time
        
        %traces - The intensity over time for each ROI [a.u.]
        %
        %   A matrix containing intensity values of all measured ROIs over
        %   time with ROIs in columns and frame in rows.
        %
        %   See also CalcMeasureROIs
        traces
        
        %tracesExist - Whether or not the trace exists at a given time
        %
        %   A logical vector or matrix specifying whether or not a given
        %   trace 'exists' at a given time point.  This is important for 3D
        %   ROIs since the ROIs, and therefore the traces, are only defined
        %   for a certain time.  For 2D or 2.5D ROI masks, tracesExist is a
        %   logical vector (to save space) indicating that the entire trace
        %   is valid.  For 3D ROI masks, tracesExist is a logical matrix.
        %
        %   See also CalcMeasureROIs, CalcMeasureROIs_2D,
        %   CalcMeasureROIs_2p5d, CalcMeasureROIs_3D
        tracesExist
        
        %tracesNorm  - The normalised intensity over time for each ROI [a.u.]
        %
        %   A matrix containing normalised intensity values of all measured
        %   ROIs over time with ROIs in X and frame in Y.
        %
        %   See also CalcMeasureROIs
        tracesNorm

    end
    
    % ================================================================== %
    
    methods
        
        function self = set.rawTrace(self, val)
            
            % Check property contains only real numerics
            utils.checks.real_num(val, 'rawTrace')
            
             % Check property has expected number of dimensions
            utils.checks.num_dims(val, 2, 'rawTrace')
            
            % Assign property
            self.rawTrace = val(:);
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.rawTraceNorm(self, val)
            
            % Check property contains only real numerics
            utils.checks.real_num(val, 'rawTraceNorm')
            
             % Check property has expected number of dimensions
            utils.checks.num_dims(val, 2, 'rawTraceNorm')
            
            % Assign property
            self.rawTraceNorm = val(:);
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.roiNames(self, val)
            
            % Check property is a cell array
            utils.checks.cell_array(val, 'roiNames')
            
            % Check property has single dimension
            utils.checks.vector(val, 'roiNames')
            
            % Assign property
            self.roiNames = val;
            
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.time(self, val)
            
            % Check property is a vector containing real, finite numerics
            utils.checks.rfv(val, 'time')
            
            % Assign property
            self.time = val;
        end
        
        % -------------------------------------------------------------- %

        function self = set.traces(self, val)
            
            % Check property contains only real numerics
            utils.checks.real_num(val, 'traces')
            
             % Check property has expected number of dimensions
            utils.checks.num_dims(val, 2, 'traces')
            
            % Assign property
            self.traces = val;
        end
        
        % -------------------------------------------------------------- %

        function self = set.tracesExist(self, val)
            
            % Check property contains only real numerics
            utils.checks.logical_able(val, 'tracesExist')
            
             % Check property has expected number of dimensions
            utils.checks.num_dims(val, 2, 'tracesExist')
            
            % Assign property
            self.tracesExist = val;
        end
        
        % -------------------------------------------------------------- %

        function self = set.tracesNorm(self, val)
            
            % Check property contains only real numerics
            utils.checks.real_num(val, 'traces')
            
             % Check property has expected number of dimensions
            utils.checks.num_dims(val, 2, 'traces')
            
            % Assign property
            self.tracesNorm = val;
        end
        
    end
    
    % ================================================================== %
        
end
