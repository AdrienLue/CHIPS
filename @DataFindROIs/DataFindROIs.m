classdef (Abstract) DataFindROIs < Data
%DataFindROIs - Superclass for all DataFindROIs classes
%
%   The DataFindROIs class is an abstract superclass that implements (or
%   requires implementation in its subclasses via abstract methods or
%   properties) all basic functionality related to storing data from ROI
%   identification. Typically there is one concrete subclass of
%   DataFindROIs for every concrete subclass of CalcFindROIs, and the
%   DataFindROIs object stores the algorithm-specific output data that is
%   generated by the corresponding CalcFindROIs class.
%
% DataFindROIs public properties inherited from Data:
%   mask            - A mask combining all of the other masks
%   means           - A helper structure containing means of the data
%   nPlotsGood      - The number of plots in non-debug mode        
%   nPlotsDebug     - The number of plots in debug mode
%   state           - The current state
%   stdevs          - A helper structure containing stdevs of the data
%
% DataFindROIs public properties
%   area            - The ROI areas [µm^2]
%   centroidX       - The ROI centroids in the x direction [pixel indices]
%   centroidY       - The ROI centroids in the y direction [pixel indices]
%   roiIdxs         - The linear pixel indices for all ROIs
%   roiMask         - The identified ROIs
%   roiNames        - The ROI names
%
% DataFindROIs public methods:
%   add_raw_data    - Add raw data to the Data object
%   add_processed_data - Add processed data to the Data object
%   add_mask_data   - Add mask data to the Data object
%   plot            - Plot a single graph from the data object
%   plot_graphs     - Plot multiple graphs from the data object
%   output_data     - Output the data
%
%   See also DataFindROIsDummy, DataFindROIsFLIKA, Data, CalcFindROIs,
%   CellScan

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    % ================================================================== %
    
    properties
        
        %roiIdxs - The linear pixel indices for all ROIs
        %
        %   See also DataFindROIsFLIKA.centroid, bwconncomp
        roiIdxs
        
        %roiMask - The identified ROIs
        %
        %   A logical array representing the regions of interest (ROIs).
        %   roiMask can be either a scalar, 2D array, or 3D array.
        %
        %   See also CalcFindROIs, CellScan
        roiMask
        
        %roiNames - The ROI names
        %
        %   A cell vector containing the ROI names.  
        %
        %   See also CalcFindROIs, CellScan
        roiNames
        
        %processed data
        
        %area - The ROI areas [µm^2]
        %
        %   A cell array of the ROI areas, calculated by multiplying the
        %   ROI area in pixels by the physical pixel size stored in the
        %   metadata.
        %
        %   See also Metadata.pixelSize, Metadata.zoom,
        %   CalibrationPixelSize
        area
        
        %centroidX - The ROI centroids in the x direction [pixel indices]
        %
        %   The x direction is counted from the left of the image.
        %
        %   See also DataFindROIs.centroidY
        centroidX
        
        %centroidY - The ROI centroids in the y direction [pixel indices]
        %
        %   The y direction is counted from the top of the image.
        %
        %   See also DataFindROIs.centroidX
        centroidY
        
    end
    
    % ================================================================== %
    
    methods
        
        function self = set.roiIdxs(self, val)
            
            % Check property is a cell array
            utils.checks.cell_array(val, 'roiIdxs')
            
            % Check property is a vector
            utils.checks.vector(val, 'roiIdxs')
            
            % Assign property
            self.roiIdxs = val(:);
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.roiMask(self, val)
            
            % Check property can be converted to a logical
            utils.checks.logical_able(val, 'roiMask')
            
            % Check property has expected number of dimensions
            strVal = 'number of mask dimensions';
            utils.checks.not_empty(val, strVal)
            nDimsVal = ndims(val);
            allowEq = true;
            utils.checks.greater_than(nDimsVal, 2, allowEq, strVal);
            utils.checks.less_than(nDimsVal, 3, allowEq, strVal);
            
            % Convert property to logical and assign
            self.roiMask = logical(val);
            
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.roiNames(self, val)
            
            % Check property is a cell array
            utils.checks.cell_array(val, 'roiNames')
            
            % Check property has single dimension
            utils.checks.vector(val, 'roiNames')
            
            % Assign property
            self.roiNames = val;
            
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.area(self, val)
            
            % Check property is a vector containing real numerics
            utils.checks.vector(val, 'area')
            maskNotNaNInf = ~isnan(val) & ~isinf(val);
            utils.checks.real_num(val(maskNotNaNInf), 'area')
            utils.checks.positive(val(maskNotNaNInf), 'area')
            
            % Assign property
            self.area = val(:);
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.centroidX(self, val)
            
            % Check property is a vector containing real numerics
            utils.checks.vector(val, 'centroidX')
            maskNotNaNInf = ~isnan(val) & ~isinf(val);
            utils.checks.real_num(val(maskNotNaNInf), 'centroidX')
            utils.checks.positive(val(maskNotNaNInf), 'centroidX')
            
            % Assign property
            self.centroidX = val(:);
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.centroidY(self, val)
            
            % Check property is a vector containing real numerics
            utils.checks.vector(val, 'centroidY')
            maskNotNaNInf = ~isnan(val) & ~isinf(val);
            utils.checks.real_num(val(maskNotNaNInf), 'centroidY')
            utils.checks.positive(val(maskNotNaNInf), 'centroidY')
            
            % Assign property
            self.centroidY = val(:);
        end
        
    end
    
    % ================================================================== %
    
end

