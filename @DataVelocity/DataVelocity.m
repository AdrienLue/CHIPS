classdef (Abstract) DataVelocity < Data
%DataVelocity - Superclass for DataVelocity classes
%
%   The DataVelocity class is an abstract superclass that implements (or
%   requires implementation in its subclasses via abstract methods or
%   properties) all basic functionality related to storing data from
%   velocity calculations.  Typically there is one concrete subclass of
%   DataVelocity for every concrete subclass of CalcVelocity, and the
%   DataVelocity object stores the algorithm-specific output data that is
%   generated by the corresponding CalcVelocity class.
%
% DataVelocity public properties inherited from Data:
%   mask            - A mask combining all of the other masks
%   means           - A helper structure containing means of the data
%   nPlotsGood      - The number of plots in non-debug mode        
%   nPlotsDebug     - The number of plots in debug mode
%   state           - The current state
%   stdevs          - A helper structure containing stdevs of the data
%
% DataVelocity public properties
%   maskSTD         - Points outside the std range
%   time            - The time series vector [s]
%   velocity        - A time series vector of the RBC velocity [mm/s]
%
% DataVelocity public methods:
%   add_raw_data    - Add raw data to the Data object
%   add_processed_data - Add processed data to the Data object
%   add_mask_data   - Add mask data to the Data object
%   plot            - Plot a single graph from the data object
%   plot_graphs     - Plot multiple graphs from the data object
%   output_data     - Output the data
%
%   See also DataVelocityRadon, DataVelocityLSPIV, DataVelocityStreaks,
%   DataVelocityPIV, Data, CalcVelocity, LineScanVel, FrameScan, DCScan

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    % ================================================================== %
    
    properties
        
        %maskSTD - Points outside the std range
        %
        %   A logical vector of points that are more than
        %   thresholdSTD*std(diameter) away from median(diameter).
        %
        %   See also ConfigVelocityRadon.thresholdSTD, 
        %   ConfigVelocityLSPIV.thresholdSTD
        maskSTD
        
        %time - The time series vector [s]
        %
        %   See also DataVelocity.velocity
        time
        
        %velocity - A time series vector of the RBC velocity [mm/s]
        %
        %   See also DataVelocity.time
        velocity
        
    end
    
    % ================================================================== %
    
    methods
        
        function self = set.time(self, val)
            utils.checks.rfv(val, 'time')
            self.time = val;
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.velocity(self, val)
            maskNotNaNInf = ~isnan(val) & ~isinf(val);
            utils.checks.real_num(val(maskNotNaNInf), 'velocity')
            utils.checks.finite(val(maskNotNaNInf), 'velocity')
            self.velocity = val;
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.maskSTD(self, val)
            utils.checks.logical_able(val, 'maskSTD')
            self.maskSTD = logical(val);
        end
        
    end
    
    % ================================================================== %
    
end
